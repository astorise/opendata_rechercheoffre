
$mdc-textfield-error-on-light: #d50000;
$mdc-textfield-error-on-dark: #ff6e6e;
$mdc-textfield-divider-on-light: rgba(black, .12);
$mdc-textfield-divider-on-dark: rgba(white, .12);
$mdc-textfield-disabled-border-on-light: rgba(#231f20, .26);
$mdc-textfield-disabled-border-on-dark: rgba(white, .3);

@function mdc-textfield-transition($property) {
  @return #{$property} 180ms $mdc-animation-fast-out-slow-in-timing-function;
}

/* postcss-bem-linter: define textfield */
input[type="text"] {
  @include mdc-typography-base;
  // We use only a subset of the MDC typography values here as changing things such as line-height
  // affects how the labels are transformed.
  @each $prop in (font-size, letter-spacing) {
    #{$prop}: map-get(map-get($mdc-typography-styles, subheading2), $prop);
  }

  display: inline-block;
  margin-bottom: 8px;
  will-change: opacity, transform, color;

  &__input {
    @include mdc-theme-prop(color, text-primary-on-light);

    padding: 0 0 8px;
    border: none;
    background: none;
    font-size: inherit;
    appearance: none;

    &::placeholder {
      @include mdc-theme-prop(color, text-hint-on-light);

      transition: mdc-textfield-transition(color);
      opacity: 1;
    }

    &:focus {
      outline: none;

      &::placeholder {
        @include mdc-theme-prop(color, text-secondary-on-light);
      }
    }

    // Remove red outline on firefox
    &:invalid {
      box-shadow: none;
    }

    @include mdc-theme-dark {
      color: white;

      &::placeholder {
        @include mdc-theme-prop(color, text-hint-on-dark);
      }

      &:focus::placeholder {
        @include mdc-theme-prop(color, text-secondary-on-dark);
      }
    }
  }

  &__label {
    @include mdc-theme-prop(color, text-hint-on-light);

    position: absolute;
    bottom: 8px;
    left: 0;
    transform-origin: left top;
    transition: mdc-textfield-transition(transform), mdc-textfield-transition(color);
    cursor: text;

    /* stylelint-enable plugin/selector-bem-pattern */

    @include mdc-theme-dark("input[type='text']" ) {
      @include mdc-theme-prop(color, text-hint-on-dark);
    }

    &--float-above {
      transform: translateY(-100%) scale(.75, .75);
      cursor: auto;
    }
  }
}

.mdc-textfield--upgraded:not(.mdc-textfield--fullwidth) {
  display: inline-flex;
  position: relative;
  box-sizing: border-box;
  align-items: flex-end;
  margin-top: 16px;

  &:not(.mdc-textfield--multiline) {
    height: 48px;

    &::after {
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 1px;
      transform: translateY(50%) scaleY(1);
      transform-origin: center bottom;
      transition: mdc-textfield-transition(background-color), mdc-textfield-transition(transform);
      background-color: $mdc-textfield-divider-on-light;
      content: "";

      @include mdc-theme-dark("input[type='text']" ) {
        background-color: $mdc-textfield-divider-on-dark;
      }
    }
  }

  .mdc-textfield__label {
    pointer-events: none;
  }
}

.mdc-textfield--focused {
  @mixin mdc-textfield-after-styles {
    @include mdc-theme-prop(background-color, primary);

    transform: translateY(100%) scaleY(2);
    transition: mdc-textfield-transition(transform);
  }

  @mixin mdc-textfield-label-styles {
    @include mdc-theme-prop(color, primary);
  }

  &.mdc-textfield--upgraded:not(.mdc-textfield--fullwidth):not(.mdc-textfield--multiline)::after {
    @include mdc-textfield-after-styles;

    @include mdc-theme-dark("input[type='text']" , true) {
      @include mdc-textfield-after-styles;
    }
  }

  .mdc-textfield__label {
    @include mdc-textfield-label-styles;

    @include mdc-theme-dark("input[type='text']" ) {
      @include mdc-textfield-label-styles;
    }
  }
}

.mdc-textfield--dense {
  margin-top: 12px;
  margin-bottom: 4px;
  font-size: .813rem;

  .mdc-textfield__label--float-above {
    // NOTE: This is an eyeball'd approximation of what's in the mocks.
    transform: translateY(calc(-100% - 2px)) scale(.923, .923);
  }
}

.mdc-textfield--invalid {
  &:not(.mdc-textfield--focused) {
    &::after {
      background-color: $mdc-textfield-error-on-light;
    }

    .mdc-textfield__label {
      color: $mdc-textfield-error-on-light;
    }
  }

  @include mdc-theme-dark("input[type='text']" , true) {
    &:not(.mdc-textfield--focused) {
      &::after {
        background-color: $mdc-textfield-error-on-dark;
      }

      .mdc-textfield__label {
        color: $mdc-textfield-error-on-dark;
      }
    }
  }
}

input[type="text"]:disabled  {
  &::after {
    display: none;
  }

  // Account for offset by border
  ember-text-field {
    padding-bottom: 7px;
  }

  border-bottom: 1px dotted $mdc-textfield-disabled-border-on-light;

  @include mdc-theme-dark("input[type='text']" , true) {
    border-bottom: 1px dotted $mdc-textfield-disabled-border-on-dark;
  }

  /* stylelint-disable plugin/selector-bem-pattern */
  ember-text-field,
  .mdc-textfield__label,
  & + .mdc-textfield-helptext {
    @include mdc-theme-prop(color, text-disabled-on-light);
  }
  /* stylelint-enable plugin/selector-bem-pattern */

  ember-text-field,
  .mdc-textfield__label {
    @include mdc-theme-dark("input[type='text']" ) {
      @include mdc-theme-prop(color, text-disabled-on-dark);
    }
  }

  @include mdc-theme-dark("input[type='text']" , true) {
    /* stylelint-disable plugin/selector-bem-pattern */
    + .mdc-textfield-helptext {
      @include mdc-theme-prop(colr, text-disabled-on-dark);
    }
    /* stylelint-enable plugin/selector-bem-pattern */
  }

  .mdc-textfield__label {
    bottom: 7px;
    cursor: default;
  }
}

ember-text-field:required + .mdc-textfield__label::after {
  margin-left: 1px;
  content: "*";

  .mdc-textfield--focused & {
    color: $mdc-textfield-error-on-light;
  }

  @include mdc-theme-dark("input[type='text']" ) {
    .mdc-textfield--focused & {
      color: $mdc-textfield-error-on-dark;
    }
  }
}

.mdc-textfield--multiline {
  /* stylelint-disable scss/dollar-variable-pattern */
  $padding-inset: 4px;
  $label-offset-y: $padding-inset + 2;
  $label-offset-x: $padding-inset;
  /* stylelint-enable scss/dollar-variable-pattern */

  display: flex;
  height: initial;
  transition: none;

  &::after {
    content: initial;
  }

  /* stylelint-disable plugin/selector-bem-pattern */

  ember-text-field {
    padding: $padding-inset;
    transition: mdc-textfield-transition(border-color);
    border: 1px solid $mdc-textfield-divider-on-light;
    border-radius: 2px;

    @include mdc-theme-dark("input[type='text']" ) {
      border-color: $mdc-textfield-divider-on-dark;
    }

    &:focus {
      @include mdc-theme-prop(border-color, primary);
    }

    &:invalid:not(:focus) {
      border-color: $mdc-textfield-error-on-light;
    }

    @include mdc-theme-dark("input[type='text']" ) {
      &:invalid:not(:focus) {
        border-color: $mdc-textfield-error-on-dark;
      }
    }
  }

  .mdc-textfield__label {
    top: $label-offset-y;
    bottom: initial;
    left: $label-offset-x;


    &--float-above {
      // Translate above the top of the input, and compensate for the amount of offset needed
      // to position the label within the bounds of the inset padding.
      // Note that the scale factor is an eyeball'd approximation of what's shown in the mocks.
      transform: translateY(calc(-100% - #{$label-offset-y})) scale(.923, .923);
    }
  }

  &input[type="text"]:disabled  {
    border-bottom: none;

    ember-text-field {
      border: 1px dotted $mdc-textfield-disabled-border-on-light;

      @include mdc-theme-dark("input[type='text']" ) {
        border-color: $mdc-textfield-disabled-border-on-dark;
      }
    }
  }
  /* stylelint-enable plugin/selector-bem-pattern */
}

.mdc-textfield--fullwidth {
  display: block;
  width: 100%;
  box-sizing: border-box;
  margin: 0;
  border: none;
  border-bottom: 1px solid $mdc-textfield-divider-on-light;
  outline: none;

  /* stylelint-disable plugin/selector-bem-pattern */

  &:not(.mdc-textfield--multiline) {
    height: 56px;
  }

  &.mdc-textfield--multiline {
    padding: 20px 0 0;
  }

  &.mdc-textfield--dense {
    &:not(.mdc-textfield--multiline) {
      height: 48px;
    }

    &.mdc-textfield--multiline {
      padding: 16px 0 0;
    }
  }

  &input[type="text"]:disabled  {
    &,
    &.mdc-textfield--multiline {
      border-bottom: 1px dotted $mdc-textfield-divider-on-light;
    }
  }

  @include mdc-theme-dark {
    border-bottom: 1px solid $mdc-textfield-divider-on-dark;

    &input[type="text"]:disabled  {
      &,
      &.mdc-textfield--multiline {
        border-bottom: 1px dotted $mdc-textfield-divider-on-dark;
      }
    }
  }

  /* stylelint-enable plugin/selector-bem-pattern */

  ember-text-field {
    width: 100%;
    height: 100%;
    padding: 0;
    resize: none;
    // Use !important here to override all other border treatments
    border: none !important;
  }
}

// Graceful degredation for css-only inputs

input[type="text"] {
  &:not(.mdc-textfield--upgraded):not(.mdc-textfield--multiline) ember-text-field {
    transition: mdc-textfield-transition(border-bottom-color);
    border-bottom: 1px solid $mdc-textfield-divider-on-light;
  }

  &:not(.mdc-textfield--upgraded) ember-text-field {
    &:focus {
      @include mdc-theme-prop(border-color, primary);
    }

    &:disabled {
      @include mdc-theme-prop(color, text-disabled-on-light);

      border-style: dotted;
      border-color: $mdc-textfield-disabled-border-on-light;
    }

    &:invalid:not(:focus) {
      border-color: $mdc-textfield-error-on-light;
    }
  }

  @include mdc-theme-dark {
    &:not(.mdc-textfield--upgraded) ember-text-field {
      &:not(:focus) {
        border-color: rgba(white, .12);
      }

      &:disabled {
        @include mdc-theme-prop(color, text-disabled-on-dark);

        border-color: $mdc-textfield-disabled-border-on-dark;
      }

      &:invalid:not(:focus) {
        border-color: $mdc-textfield-error-on-dark;
      }
    }
  }
}

/* postcss-bem-linter: end */

/* postcss-bem-linter: define textfield-helptext */

.mdc-textfield-helptext {
  @include mdc-theme-prop(color, text-hint-on-light);

  margin: 0;
  transition: mdc-textfield-transition(opacity);
  font-size: .75rem;
  opacity: 0;
  will-change: opacity;

  @include mdc-theme-dark {
    @include mdc-theme-prop(color, text-hint-on-dark);
  }

  /* stylelint-disable plugin/selector-bem-pattern */
  input[type="text"] + & {
    margin-bottom: 8px;
  }

  .mdc-textfield--dense + & {
    margin-bottom: 4px;
  }

  .mdc-textfield--focused + &:not(#{&}--validation-msg) {
    opacity: 1;
  }

  /* stylelint-enable plugin/selector-bem-pattern */
}

.mdc-textfield-helptext--persistent {
  transition: none;
  opacity: 1;
  will-change: initial;
}

/* postcss-bem-linter: end */

.mdc-textfield--invalid {
  + .mdc-textfield-helptext--validation-msg {
    color: $mdc-textfield-error-on-light;
    opacity: 1;
  }

  @include mdc-theme-dark("input[type='text']" , true) {
    + .mdc-textfield-helptext--validation-msg {
      color: $mdc-textfield-error-on-dark;
    }
  }
}

// mdc-form-field tweaks to align text field label correctly
/* stylelint-disable selector-no-type */
.mdc-form-field > input[type="text"] + label {
  align-self: flex-start;
}
/* stylelint-enable selector-no-type */


.m-textfield{
  position: relative;
  margin: 10px 0px;
  padding-bottom: 0px;
	max-width: 300px;
}
.m-textfield input{
  padding: 10px;
  width: 100%;
  font-size: 14px;
  border: 0;
  border-bottom: 1px solid #2196F3;
 /* border-left: 1px solid #2196F3;*/
  transition: all .4s ease;
}
/*css for the textbox focus border*/
.m-textfield:after{
	width: 0%;
	height: 2px;
	background-color: #2196F3;
	display: block;
	content: "";
	transition: all .4s;
}

/*the placeholder text*/
.m-textfield >label{
  position: absolute;
  /*needed for transitions*/
  top: 0;
  left: 0;
  padding: 10px 10px 10px 20px;
  transition: all .4s ease;
  color: #2196F3;
  opacity: .8;
}
.fa-required{
  position: absolute;
  left: 0;
  top: 0;
  padding: 10px;
  transition: color .4s;
  font-size: 8px;
}

/*active transition and valid*/
.m-textfield input:valid, .m-textfield input:focus{
  outline: none;
}
/*active only*/
.m-textfield input:focus{
   border-color: #FF6D00; 
}
/*styling for focus only*/
.m-textfield input:focus + label{
  color: #FF6D00;
}
/*styling for focus and valid*/
//.m-textfield input:not([value=""]):not(:focus):invalid +  label, 
.m-textfield input:focus + label, .value input + label{
  top: -25px;
  padding: 10px;
  font-size: 12px;

}